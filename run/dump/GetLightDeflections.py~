from linslens import EELsModels_huge as L
import numpy as np
import pylab as pl
from linslens import EELsKeckModels as K
from linslens.Plotter import *
import lenslib
from pylens import MassModels

def clip(arr,nsig=3.5):
    a = arr.flatten()
    m,s,l = a.mean(),a.std(),a.size
    while 1:
        a = a[abs(a-m)<s*nsig]
        if a.size==l:
            return m,s
        m,s,l = a.mean(),a.std(),a.size


def Deflect(model,kmodel,name,mass):
    model.Initialise()
    print model.galno
    kmodel.Initialise()
    zl,zs = lz[name][0],sz[name][0]
    sig_crit = lenslib.sig_crit(zl,zs)
    if model.galno == 1.:
        gal = model.gals[0]
        lens1 = MassModels.Sersic('lens 1',{'x':gal.x,'y':gal.y,'n':gal.n,'re':gal.re,'q':gal.q,'pa':gal.pa,'b':1})
        lens1.getbFromMass(mass,sig_crit)
        print 'b', lens1.b
        lenses = [lens1]
    else:
        gal1,gal2 = model.gals
        # will have to divide up mass according to relative fluxes?
        mv1, mv2 = gal1.getMag(model.fits[0][0],0), gal2.getMag(model.fits[0][1],0)
        Fv1,Fv2 = 10**(-0.4*mv1), 10**(-0.4*mv2)
        f1,f2 = Fv1/(Fv1+Fv2), Fv2/(Fv1+Fv2)
        
        lens1 = MassModels.Sersic('lens 1',{'x':gal1.x,'y':gal1.y,'n':gal1.n,'re':gal1.re,'q':gal1.q,'pa':gal1.pa,'b':1})
        lens2 = MassModels.Sersic('lens 2',{'x':gal2.x,'y':gal2.y,'n':gal2.n,'re':gal2.re,'q':gal2.q,'pa':gal2.pa,'b':1})
        print lens1.re, lens2.re
        print mass+np.log10(f1),mass+np.log10(f2)
        lens1.getbFromMass(10**(mass*f1),sig_crit*f1)
        lens2.getbFromMass(10**(mass*f2),sig_crit*f2)
        print 'b1,b2',lens1.b,lens2.b
        lenses = [lens1, lens2]
    # work out how Matt defines b
    yc,xc = iT.coords(model.imgs[0].shape)
    xv,yv = xc + model.Dx, yc+model.Dx
    xi,yi = xv+model.Ddic.dx, yv+model.Ddic.dy
    for lens in lenses:
        lens.setPars()
    x0v,y0v = pylens.getDeflections(lenses,[xv,yv])
    x0i,y0i = pylens.getDeflections(lenses,[xi,yi])
    
    # now do the k band
    kmodel.Initialise()
    yk,xk = iT.coords(kmodel.img.shape)
    xk,yk = xk*kmodel.pix + kmodel.Ddic['xoffset'] + kmodel.Dx, yk*kmodel.pix + kmodel.Ddic['yoffset'] + kmodel.Dy
    # rescale?
    x0k,y0k = pylens.getDeflections(lenses,[xk,yk])

    outFile = '/data/ljo31b/EELs/galsub/light_deflections_'+name+'.npy'
    deflections = [[x0v,y0v],[x0i,y0i],[x0k,y0k]]
    f = open(outFile,'wb')
    cPickle.dump(deflections,f,2)
    f.close()

# notes: use getbFromMass, using stellar mass. Just how to get sigCrit?

dir = '/data/ljo31/Lens/LensModels/twoband/'
sz = np.load('/data/ljo31/Lens/LensParams/SourceRedshiftsUpdated.npy')[()]
lz = np.load('/data/ljo31/Lens/LensParams/LensRedshiftsUpdated.npy')[()]

bands = np.load('/data/ljo31/Lens/LensParams/HSTBands.npy')[()]
masses = np.load('/data/ljo31b/EELs/inference/new/huge/masses_212.npy')
logM = masses[0]

names = sz.keys()
names.sort()
        
for name in names:
    if name == 'J1248':
        continue
    try:
        result = np.load(dir+name+'_212')
        kresult = np.load(dir+name+'_Kp_212')
    except:
        if name == 'J1347':
            result = np.load(dir+name+'_112')
            kresult = np.load('/data/ljo31/Lens/J1347/twoband_Kp_112_2')
        elif name == 'J1619':
            result = np.load(dir+name+'_212')
            kresult = np.load(dir+name+'_Kp_212_lensandgalon')
            print 'J1619'                                                                                                                                                                                                       
        else:
            result = np.load(dir+name+'_211')
            kresult = np.load(dir+name+'_Kp_211')
    
    model = L.EELs(result, name)
    kmodel = K.EELs(kresult,result,name)
    mass = logM[np.where(names==name)]
    print mass
    print name
    Deflect(model,kmodel,name,mass)


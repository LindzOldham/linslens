from linslens.Profiles import *
from astLib import astCalc
import glob, numpy as np, pylab as pl
import lenslib
from jeans.makemodel import deproject
import GetStellarMass
import cPickle

names = ['J0837','J0901','J0913','J1125','J1144','J1218','J1323','J1347','J1446','J1605','J1606','J1619','J2228']
Mvir, dMvir, r_eff, dr_eff = np.load('/data/ljo31/Lens/LensParams/Mvir.npy')
lz = np.load('/data/ljo31/Lens/LensParams/LensRedshiftsUpdated.npy')[()]
sz = np.load('/data/ljo31/Lens/LensParams/SourceRedshiftsUpdated.npy')[()]

name = 'J0901'

dir = '/data/ljo31b/EELs/galsub/emceeruns/'
file = glob.glob(dir+name+'_parametric_DPL*')
file.sort()
f = file[-1]
print f
result_DPL = np.load(f)

lp_DPL,trace_DPL,dic_DPL,_ = result_DPL
a1_DPL,a3_DPL = np.unravel_index(lp_DPL[:,0].argmax(),lp_DPL[:,0].shape)
                

## construct power-law sigma and mass
zl,zs = lz[name][0], sz[name][0]
sig_crit = lenslib.sig_crit(zl,zs) # solar masses per Mpc^2
sig_crit /= (1e3)**2. # solar masses per kpc^2
scale = astCalc.da(zl)*np.pi/180./3600 * 1e3

r = np.logspace(-7,3,3500)
lr = r[:-100]

### gNFW sigma and mass
rs, rein = dic_DPL['Lens 1 rs'][a1_DPL,0,a3_DPL]*0.05*scale,dic_DPL['Lens 1 b'][a1_DPL,0,a3_DPL]*0.05*scale 
gamma = dic_DPL['Lens 1 gamma'][a1_DPL,0,a3_DPL]

sigma_DPL = gNFW(r,sig_crit,rein,gamma,rs,projected=True)
DM_DPL, DM_rho_DPL = gNFW(r,sig_crit,rein,gamma,rs)

### also old result -- Einstein radius
cat = np.load('/data/ljo31/Lens/LensParams/Structure_lensgals_2src.npy')[0]
rein = cat[name]['Lens 1 b']*0.05*scale

# add in LM!
dir = '/data/ljo31/Lens/LensModels/twoband/'
try:
    oresult = np.load(dir+name+'_212')
except:
    if name == 'J1347':
        oresult = np.load(dir+name+'_112')
    else:
        oresult = np.load(dir+name+'_211')

Mstar_DPL = np.percentile(dic_DPL['stellar mass'][:,0].ravel(),50)#dic_DPL['stellar mass'][a1_DPL,0,a3_DPL]
LM = GetStellarMass.GetStellarMass(oresult,1.,r,scale,name) 
LM_DPL = LM*Mstar_DPL
Mstar_l = np.percentile(dic_DPL['stellar mass'][:,0].ravel(),16)
Mstar_u = np.percentile(dic_DPL['stellar mass'][:,0].ravel(),84)

## finally, add original inference for total mass
rein, eta = cat[name]['Lens 1 b']*0.05*scale, cat[name]['Lens 1 eta']
DM_DPL = np.array(DM_DPL[:-100])

# now make mass plots
pl.figure(figsize=(9.25,9))
#pl.subplot(121)
pl.fill_between(lr,LM*Mstar_l,LM*Mstar_u,color='LightBlue',alpha=0.5)
pl.fill_between(lr,0.95*DM_DPL,1.05*DM_DPL,color='LightPink',alpha=0.5)

pl.plot(lr,DM_DPL,color='Crimson',label='dark')
pl.plot(lr,LM_DPL,color='SteelBlue',label='light')
pl.plot(lr,LM_DPL+DM_DPL,color='k',label='dark+light')
pl.fill_between(lr,LM*Mstar_l+0.94*DM_DPL,LM*Mstar_u+1.06*DM_DPL,color='LightGray',alpha=0.5)
###

###
pl.legend(loc='lower right',ncol=1)#fontsize=15)
pl.ylabel(r'mass (M$_{\odot}$)')
pl.xlabel('radius (kpc)')
pl.axvline(rein,color='k',ls='--',label='Einstein radius',lw=3) # Einstein radius

pl.axvline(r_eff[names==name],color='k',ls='-.',label='effective radius',lw=3) # effective radius
pl.errorbar(r_eff[names==name], Mvir[names==name],xerr = dr_eff[names==name],yerr=dMvir[names==name],color='k',marker='o',lw=4)
pl.axis([0,15,1e9,3e11])

# inset

a = pl.axes([0.185,0.65,0.25,0.25])
r,dpdr_DPL,dpdr_DPL_l,dpdr_DPL_u = np.load('/home/ljo31/Documents/Proposals/J0837_slope.npy')
a.plot(r,dpdr_DPL,color='SteelBlue',label='dark matter')
a.set_ylabel('density slope',size=12)#'small')
a.set_xlabel('radius (kpc)',size=12)#'small')
a.fill_between(r,dpdr_DPL_l-0.005, dpdr_DPL_u-0.005, color='LightBlue',alpha=0.5)
a.set_xlim([0,10])
a.set_ylim([-2.4,-2.1])
a.get_yaxis().set_tick_params(which='both', direction='in',labelsize=12)
a.get_xaxis().set_tick_params(which='both', direction='in',labelsize=12)
a.locator_params(axis='both',nbins=3,size=5)#'small')
a.xaxis.set_label_coords(0.5,0.11)
#a.yaxis.set_label_coords(0.15,0.5)
#a.get_yaxis().set_tick_coords(0.15)
#a.get_xaxis().set_tick_coords(0.15)
pl.savefig('/home/ljo31/Documents/Proposals/EELINSET.pdf')
pl.show()
